<!DOCTYPE html>
<html lang="en">
<head>
  <title>Admin - Notre Dame Salem</title>

  <%- include("partials/head"); %>
  
  <link rel="stylesheet" href="out.css">
  <script src="https://kit.fontawesome.com/f3339b4404.js" crossorigin="anonymous"></script>
</head>
<body>
  <%# include("partials/loader"); %>
  <%- include("partials/header"); %>
  
  <main class="py-8 relative">
    <h2 class="font-bold text-center">
      Admin
    </h2>

    <div id="spinner" class="mt-4 w-fit mx-auto">
      <i class="animate-spin"><%-include("../dist/icons/spinner.svg")%></i> Loading
    </div>
    
    <div class="mt-4 mb-8 w-fit mx-auto">
      <span class="text-sm text-slate-800">Choose an Option to edit:</span>
      <select id="page-select" class="mt-2" disabled>
        <option value="none" selected> None </option>
        <option value="admission"> Admissions </option>
        <option value="news"> News </option>
        <option value="events"> Events </option>
        <option value="why"> Why? </option>
      </select>
    </div>

    <div id="wrapper"></div>
  </main>

  <%- include("partials/footer"); %>
  <script>
    <%-include("../dist/scripts/index.js")%>
  </script>
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js"
    import { getStorage, uploadBytes, deleteObject, list, ref } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-storage.js"
    import { getAuth, onAuthStateChanged, getIdTokenResult, signOut } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-auth.js"
    import { getFirestore, writeBatch,
            doc, addDoc, updateDoc, getDoc, getDocs,
            collection, query, limit, orderBy
           } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js"

    const firebaseappConfig = {
      apiKey: "AIzaSyB9S-lwz4yOHcajjQmFD8Qj9AynV-wZ0A0",
      authDomain: "ndhcs-361bf.firebaseapp.com",
      projectId: "ndhcs-361bf",
      storageBucket: "ndhcs-361bf.appspot.com",
      messagingSenderId: "644967053944",
      appId: "1:644967053944:web:ff6463c5e53ed7c0c5cb8d",
      measurementId: "G-4QGDHBZP09"
    }

    const app = initializeApp(firebaseappConfig)
    const db = getFirestore(app)
    const storage = getStorage(app)
    const auth = getAuth(app)
 
    window.addEventListener("load", () => {
      onAuthStateChanged(auth, async user => {
        if (!user) return window.location = "/auth?m=Session%20Expired"

        getIdTokenResult(user)
        .then(token => {
          let gap = Date.now()- (new Date(token.authTime)).getTime()
          if (gap > 30 * 60 * 1000) signOut(auth)
            .then(() => {
              window.location = "/auth"
            })
            .catch(e => {
              window.location = "/500?m="+encodeURI(e.message)
            })
          else load()
        })
        .catch(e => {
          console.error(e)
          window.location = "/500?m="+encodeURI(e.message)
        })
      })

      const spinner = document.getElementById("spinner")
      const pageSelector = document.getElementById("page-select")
      
      function load() {
        spinner.classList.add("hidden")
        pageSelector.disabled = false
        pageSelector.addEventListener("change", e => loadPage(e.target.value))
      }

      function loadPage(name) {
        const wrapper = document.getElementById("wrapper")
        
        const pages = ["admission", "news", "events", "why"]
        if (!pages.includes(name)) {
          wrapper.replaceChildren()
          spinner.classList.add("hidden")
          return
        }
        
        const Name = name.charAt(0).toUpperCase() + name.substring(1)
        spinner.classList.remove("hidden")

        if (name === "why") {
          const el = document.createElement("div")
          el.className = "mt-16 px-4 w-fit mx-auto max-w-2xl"
          el.innerHTML = `
            <h2> How is this site Good? </h2><br>
            <p>Obviously you could come to a conclusion just by the looks of :ts: compared to the <a href="http://notredamehcs.org" target="_blank" rel="nofollow" class="text-blue-600 hover:underline">current :os:</a>. But that may not be the only reason for you to regard this better. Yes, I got more to add.</p><br>
            <p>:os: does not have <b>SSL certificate</b> which makes it less secure and it comes with security warning for the users which is not the case in :ts:</p><br>
            <p>:os:'s Interface is a bit off on mobile through which most clients visit our school. :ts:'s User Interface and Experience is delicate.</p><br>
            <p>:ts: has better way of presentation of content and serving what the clients' need.</p><br>
            <p>Existence of <a href="/admin" target="_blank" rel="nofollow" class="text-blue-600 hover:underline">Admin page</a> to manually add News and Events is available. Not sure how this works in :os:, yet trust me, I can do better.</p><br>
            <h4> Page performance (recommended by Google) comparision. </h4>
            <div class="w-fit mx-auto max-w-xs"><img src="images/score.webp" alt="Scores of :os: versus :ts:" class="w-full"/></div>
            <br><p>:ts: is perfect in SEO (Search Engine Optimization) which would help ranking and showing up in Search results.</p><br>
            <p>:os: takes a few(2-3) seconds to load pages which sometimes annoy users. :ts: gives a quite good impression when it comes to perfomance.</p><br>
            <p>All these points should explain how good this site is. Got any questions? <a href="mailto:dashskndash@gmail.com" target="_blank" rel="nofollow" class="text-blue-600 hover:underline">Mail me</a> right away!</p>
          `.replaceAll(":os:", "Official Site")
          .replaceAll(":ts:", "This Site")

          spinner.classList.add("hidden")
          wrapper.replaceChildren(el)
          return
        }
        
        if (name === "admission") {
          getDoc(doc(db, "misc/"+name))
          .then(doc => {
            let { ongoing } = doc.data() || {}
            
            let el = document.createElement("form")
            el.className = "mt-2 p-4 w-fit mx-auto max-w-2xl flex flex-col justify-center items-center gap-4 text-gray-50 bg-slate-600"
        
            el.innerHTML = `
            <h2> ${Name} </h2>
            <label class="mt-2"> Set Ongoing Status: </label>
            <select class="text-neutral-900" name="ongoing" required>
              <option value="true" ${ongoing ? "selected" : ""}>True (Admissions Ongoing)</option>
              <option value="false" ${!ongoing ? "selected" : ""}>False</option>
            </select>
            <button class="px-2 py-1 bg-slate-800" type="submit">Change</button>
            <p class="-mt-2"></p>
            `

            el.addEventListener("submit", e => {
              e.preventDefault()
              let statusEl = e.target.lastElementChild
              
              let newData = new FormData(e.target)
              let newOngoing = newData.get("ongoing")
              if (newOngoing === ongoing) return statusEl.innerHTML = ""
              else ongoing = newOngoing
              
              statusEl.innerHTML = "Loading"
              
              updateDoc(doc.ref, { ongoing: (newOngoing === "true" ? true : false) })
              .then(() => statusEl.innerHTML = "Done.")
              .catch(e => {
                console.error(e)
                statusEl.innerHTML = "Couldn't update. Try again."
              })
            })

            wrapper.replaceChildren(el)
          })
          .catch(e => {
            console.error(e)
            wrapper.append("Failed to load data, try refreshing or come back later.")
          })
          .then(() => spinner.classList.add("hidden"))
          return
        }
        
        const addElBtn = document.createElement("button")
        const rmChkdBtn = document.createElement("button")
        const chkBoxEl = document.createElement("p")
        const thisEl = document.createElement("div")
        
        addElBtn.className = "mt-4 px-2 py-1 block w-fit mx-auto shadow-md bg-slate-600 hover:bg-slate-800 text-gray-50";
        addElBtn.innerHTML = `Add ${Name}`
        
        rmChkdBtn.className = "mt-4 px-2 py-1 block w-fit mx-auto shadow-md bg-rose-600 hover:bg-rose-800 text-gray-50"
        rmChkdBtn.innerHTML = `Remove Selected ${Name}`
        
        chkBoxEl.className = "mt-8 text-sm text-slate-600 text-center"
        chkBoxEl.innerHTML = `Check the top-right box to remove ${Name}.`
        
        thisEl.id = name
        thisEl.className = "mt-2 w-fit mx-auto max-w-2xl grid grid-cols-1 sm:grid-cols-2 gap-8"
        
        wrapper.replaceChildren(addElBtn, rmChkdBtn, chkBoxEl, thisEl)

        addChildren()
        function addChildren() {
          spinner.classList.remove("hidden")
          
          getDocs(query(collection(db, name), orderBy("date", "desc"), limit(name === "news" ? 25 : 10)))
          .then(docs => {
            let els = []
            let i = 0
            docs.forEach(doc => {
              i++
              els.push(getEl(i, doc.id, doc.data()))
            })
            els.length
              ? thisEl.replaceChildren(...els)
              : thisEl.replaceChildren(`No ${Name} Found.`)
          })
          .catch(e => {
            console.error(e)
            thisEl.replaceChildren(`Could not fetch ${name}. Try refreshing.`)
          })
          .then(() => spinner.classList.add("hidden"))
        }

        addElBtn.addEventListener("click", e => {
          const el = document.createElement("form")
          el.className = "p-4 relative grid sm:col-span-2 transition-transform origin-top-right bg-slate-700"
          el.addEventListener("submit", name === "news" ? addNews : addEvent)
          el.innerHTML = `
            <button onclick="rmAddEl(event)" class="absolute top-2 right-4 text-rose-200" type="button"> x </button>
            <h3 class="text-gray-50">New</h3>
            <input class="mt-4 px-2 py-1 bg-slate-200 outline-none" name="title" placeholder="title" type="text" required>
            <input class="mt-4 px-2 py-1 bg-slate-200 outline-none" name="date" placeholder="date" type="date" required>
            <input class="mt-4 px-2 py-1 bg-slate-200 outline-none" ${
              name === "news"
              ? `name="url" placeholder="url" type="text"`
              : `name="files" type="file" accept=".jpeg,.jpg,.png,.webp,.gif" multiple required`
            }>
            <button class="mt-4 px-2 py-1 w-fit ml-auto bg-sky-300" type="submit">Add</button>
            <p class="text-gray-50 text-center"></p>
          `
          thisEl.prepend(el)
        })
        
        rmChkdBtn.addEventListener("click", async e => {
          const delDocs = Array.from(document.getElementById(name).querySelectorAll("div input:checked")).map(node => node.parentElement.id)
          const batch = writeBatch(db)
          
          if (!delDocs.length) alert(`No ${Name} Selected for removal.`)
          else if (window.confirm(`Delete ${delDocs.length} Old ${Name}?`)) {
            spinner.classList.remove("hidden")
            
            for (let i=0; i < delDocs.length; i++) {
              let docRef = doc(db, name+"/"+delDocs[i])
              try {
                if (name === "events") {
                  let evImgs = await list(ref(storage, (await getDoc(docRef)).data().dir))
                  for (let i=0; i < evImgs.items.length; i++) {
                    await deleteObject(evImgs.items[i])
                  }
                }
              } catch (e) {
                console.error("Could not delete images.", e)
              } finally {
                batch.delete(docRef)
              }
            }
            batch.commit()
            .then(addChildren)
            .catch(e => {
              alert("Something went wrong while removing. Try again.")
              console.error(e)
            })
            .then(() => spinner.classList.add("hidden"))
          }
        })

        function addEvent(e) {
          e.preventDefault()
          
          const status = e.target.lastElementChild
          status.innerHTML = "loading..."
          
          const formData = new FormData(e.target)
          const fileInput = e.target.querySelector("input[type='file']")
          const title = formData.get('title').trim()
          const date = new Date(formData.get("date"))
          const files = Array.from(fileInput.files)

          const types = ["image/jpg", "image/jpeg", "image/png", "image/webp", "image/gif"]
          
          if (!title) {
            status.innerHTML = "Invalid Title."
          } else if (date.getTime() > Date.now()) {
            status.innerHTML = "Invalid Date"
          } else if (files.length  < 3 || files.length > 16) {
            status.innerHTML = "Minimum 3 and Maximum 16 Images Only."
          } else {
            for (let i = 0; i < files.length; i++) {
              let f = files[i]
              if (!types.includes(f.type)) {
                status.innerHTML = `${f.name}: only jpg, jpeg, png, webp and gif are supported.`
                return
              } else if (f.size > 512*1024) {
                status.innerHTML = `${f.name}: maxmimum size - 512 kb.`
                return
              }
            }
            
            if (window.confirm(`Confirm Add new Event "${title}" with ${files.length} files?`)) {
              let completed = 0
              let failed = 0
              status.innerHTML = `${completed}/${files.length} uploading...`
              
              let dir = title.toLowerCase().replace(/\s+/g, "_")
              files.forEach(
                (f,i) => uploadBytes(ref(storage, `${dir}/${i}.${f.name.split(".").slice(-1)[0]}`), f)
                    .then(() => setEvStat())
                    .catch(e => {
                      console.error(e)
                      status.innerHTML += `<br>${f.name} upload failed`
                      setEvStat(true)
                    })
              )

              function setEvStat(e) {
                completed++
                e && failed++
                status.innerHTML = "Upload Completed"

                if (completed !== files.length) return
                else if (failed) status.innerHTML += `<br>${files.length-completed} uploads failed. Refresh the page and try uploading all of them again.`
                else addDoc(collection(db, "events"), { title, date, dir, imgCount: completed })
                  .then(addChildren)
                  .catch(e => {
                    console.error(e)
                    status.innerHTML = e.message
                  })
              }
            }
          }
        }
        
        function addNews(e) {
          e.preventDefault()

          const status = e.target.lastElementChild
          status.innerHTML = "loading..."
          
          const formData = new FormData(e.target)
          const data = {
            title: formData.get('title').trim(),
            date: new Date(formData.get("date")),
            url: formData.get("url")
          }

          if (!data.title) {
            status.innerHTML = "Invalid Title."
          } else if (data.date.getTime() > Date.now()) {
            status.innerHTML = "Invalid Date"
          } else {
            addDoc(collection(db, "news"), data)
            .then(addChildren)
            .catch(e => {
              console.error(e)
              status.innerHTML = e.message
            })
          }
        }

        function getEl(i, id, {title,date,url,dir,imgCount}) {
          date = new Date(date.seconds*1000)
      
          const el = document.createElement("div")
          el.id = id
          el.className = "relative p-4 bg-slate-200"
          el.innerHTML = `
            <input type="checkbox" class="peer absolute top-2 right-2">
            <h4 class="peer-checked:text-red-800">${i}. ${title}</h4>
            <h5 class="peer-checked:text-red-800">${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}</h5>
            ${name === "news"
            ? `<a href="${url}" class="peer-checked:text-red-800 underline">URL</a>`
            : `<span>With ${imgCount} images</span>`}
          `
          return el
        }
      }
    })

    function rmAddEl(e) {
      let el = e.target.parentElement
      el.classList.add("scale-0")
      setTimeout(() => el.remove(), 300)
    }
  </script>
</body>
</html>